#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 32, local_size_y = 16, local_size_z = 1) in;

layout(set=0, binding=1) uniform sampler2D inDepth;
layout(set=0, binding=2) uniform sampler2D inNormal;
layout(set=0, binding=3) uniform sampler2D inDiffuse;
layout(set=0, binding=4) uniform sampler2D inMaterial;
layout(set=0, binding=5) uniform sampler2D LightingMap;
layout(set=0, binding=6) uniform sampler2D SSRHitsMap;
layout(set=0, binding=7) uniform sampler2D SSRHitsMask;
layout(set=0, binding=8) uniform sampler2D GlossyMV;

layout(set=0, binding=9) writeonly uniform image2D ReprojectionReflectionColorMap;
layout(set=0, binding=10) writeonly uniform image2D BRDFWeightMap;
layout(set=0, binding=11) writeonly uniform image2D ReuseMap;

#define FADE_START 0.7
#define FADE_END 1.0

#include <Misc/Camera.glsl>
#include <Misc/Utils.glsl>
#include <Misc/Constants.glsl>
#include <Materials/BRDF.glsl>

float Luminance(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

float calculateReprojectionFade(vec2 screenUV, int viewIndex) 
{
    float fade = 1.0f;
    vec2 stereoUV = ScreenUVToStereoUV(screenUV, viewIndex);
    float boundary = clamp(distance(stereoUV, vec2(0.5f, 0.5f)) * 2.0f, 0.0f, 1.0f);
    fade = 1.0f - clamp((boundary - FADE_START) / (FADE_END - FADE_START), 0.0f, 1.0f);

    return fade;
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    int viewIndex = pixel.x < (camera.pixelSize.x / 2) ? 0 : 1;
    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;

    // Get the origin and direction in world space
    vec3 originWS = StereoWorldSpacePosAtScreenUV(screenUV);
    vec3 eyeWS = camera.cameraStereoPosition[viewIndex].xyz;
    vec3 eyeWS2 = camera.cameraStereoPosition[1 - viewIndex].xyz;

    vec3 eyeRayWS = normalize(eyeWS - originWS);

    vec3 normalWS = texture(inNormal, screenUV).xyz;

    vec3 diffuse = texture(inDiffuse, screenUV).xyz;

    float metallic = texture(inMaterial, screenUV).r;
    float roughness = texture(inMaterial, screenUV).g;

    vec3 F0 = vec3(0.04f);
    F0 = mix(F0, diffuse, metallic);

    vec3 glossyMV = texture(GlossyMV, screenUV).xyz;
    // vec3 glossyMV = texelFetch(GlossyMV, pixel, 0).xyz;
    vec2 anotherUV = screenUV + glossyMV.xy;

    vec4 finalColor = vec4(0.0f);
    vec3 finalWeight = vec3(0.0f);

    // bool reuse = false;
    bool reuse = (glossyMV.x != 0.0f && glossyMV.y != 0.0f) ? true : false;

    if(reuse) {
        float curReflectDepth = glossyMV.z;
        float anotherReflectDepth = texture(GlossyMV, anotherUV).z;
        if(roughness < 0.35f && abs(curReflectDepth - anotherReflectDepth) > 0.001f) {
            reuse = false;
        }
    }

    vec4 hitInfo = texelFetch(SSRHitsMap, pixel, 0); // xy: hitUV, z: hitDepth, w: pdf
    // vec4 hitInfo = texture(SSRHitsMap, screenUV);
    vec3 hitPosWS = StereoWorldSpacePosAtScreenUV(hitInfo.xy);

    if(hitInfo.xy == vec2(-1.0f) || hitInfo.z == 0.0f) {
        imageStore(ReprojectionReflectionColorMap, pixel, finalColor);
        imageStore(BRDFWeightMap, pixel, vec4(finalWeight, 0.0f));
        return;
    }

    vec3 reflectRayWS = normalize(hitPosWS - originWS);
    vec3 H1 = normalize(eyeRayWS + reflectRayWS);

    vec3 brdf = SpecularReflectionMicrofacet(F0, roughness, normalWS, reflectRayWS, eyeRayWS);
    float pdf = max(1e-5, hitInfo.w);

    vec3 weight1 = max(brdf / pdf, 0.000001);
    vec4 sampleColor1 = vec4(texture(LightingMap, hitInfo.xy).xyz * weight1, texture(SSRHitsMask, screenUV).x);

    // sampleColor1.xyz /= 1.0f + Luminance(sampleColor1.xyz);
    vec4 hitInfo2 = texelFetch(SSRHitsMap, ivec2((anotherUV) * camera.pixelSize.xy), 0); // xy: hitUV, z: hitDepth, w: pdf
    if(hitInfo2.x == -1.0f && hitInfo2.y == -1.0f) {
        reuse = false;
    }
    if(reuse) {
        // vec4 hitInfo2 = texture(SSRHitsMap, anotherUV);
        vec3 hitPosWS2 = StereoWorldSpacePosAtScreenUV(hitInfo2.xy);
        vec3 originWS2 = StereoWorldSpacePosAtScreenUV(anotherUV);
        vec3 reflectRayWS2 = normalize(hitPosWS2 - originWS2);
        vec3 normalWS2 = texture(inNormal, anotherUV).xyz;
        vec3 eyeRayWS2 = normalize(eyeWS2 - originWS2);
        vec3 H2 = normalize(eyeRayWS2 + reflectRayWS2);

        vec3 brdf2 = SpecularReflectionMicrofacet(F0, roughness, normalWS2, reflectRayWS2, eyeRayWS2);
        float pdf2 = max(1e-5, hitInfo2.w);

        vec3 weight2 = brdf2 / pdf2;
        vec4 sampleColor2 = vec4(texture(LightingMap, hitInfo2.xy).xyz * weight2, texture(SSRHitsMask, anotherUV).x);
        // sampleColor2.xyz /= 1.0f + Luminance(sampleColor2.xyz);
        // float fade = calculateReprojectionFade(anotherUV, 1 - viewIndex);

        float alphaBlend = mix(0.0f, 0.5f, clamp(dot(H1, H2), 0.0f, 1.0f));

        finalColor = sampleColor1 * (1.0f - alphaBlend) + sampleColor2 * alphaBlend; 
        // finalColor.a = max(sampleColor1.a, sampleColor2.a);
        finalWeight = weight1 * (1.0f - alphaBlend) + weight2 * alphaBlend;
    }
    else {
        finalColor.rgba = sampleColor1.rgba;
        finalWeight = weight1;
    }
    finalColor.rgb = finalColor.rgb / finalWeight;
    // finalColor.rgb /= 1.0f - Luminance(finalColor.xyz);

    imageStore(ReprojectionReflectionColorMap, pixel, finalColor);
    imageStore(BRDFWeightMap, pixel, vec4(finalWeight, 1.0f));
    imageStore(ReuseMap, pixel, vec4(reuse ? 1.0f : 0.0f));
}
