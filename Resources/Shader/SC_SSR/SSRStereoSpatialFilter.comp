#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#define NUM_FILTER 9

layout(local_size_x = 32, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 1) uniform UniformFilterData {
    vec2 noiseScale;
} filterData;

layout(set = 0, binding = 2) uniform UniformJitterData {
    vec2 jitter;
} jitterData;

layout(set=0, binding=3) uniform sampler2D inNormal;
layout(set=0, binding=4) uniform sampler2D BRDFWeightMap;
layout(set=0, binding=5) uniform sampler2D blueNoise;
layout(set=0, binding=6) uniform sampler2D ReprojectionReflectionColorMap;

layout(set=0, binding=7) writeonly uniform image2D ReflectionColorMap;

#include <Misc/Camera.glsl>
#include <Misc/Constants.glsl>
#include <Materials/BRDF.glsl>

float Luminance(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

// const vec2 offset[9] = {vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0), vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0)};
const vec2 offset[9] = {vec2(-2.0, -2.0), vec2(0.0, -2.0), vec2(2.0, -2.0), vec2(-2.0, 0.0), vec2(0.0, 0.0), vec2(2.0, 0.0), vec2(-2.0, 2.0), vec2(0.0, 2.0), vec2(2.0, 2.0)};

void main() 
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    int viewIndex = pixel.x < (camera.pixelSize.x / 2) ? 0 : 1;
    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;

    vec3 normalWS = texture(inNormal, screenUV).xyz;

    vec2 noise = texture(blueNoise, (screenUV + jitterData.jitter) * filterData.noiseScale).rg * 2.0f - 1.0f;
    mat2 rotation = mat2(noise.x, noise.y, -noise.y, noise.x);

    vec4 totalWeight = vec4(0.0f);
    vec4 ReflectionColor = vec4(0.0f);

    for(int i = 0; i < NUM_FILTER; i++) {
        vec2 offsetUV = rotation * offset[i] * camera.pixelSize.zw;
        vec2 sampleUV = screenUV + offsetUV;
        vec4 BRDFWeight = texture(BRDFWeightMap, sampleUV);
        vec4 sampleColor = texture(ReprojectionReflectionColorMap, sampleUV);

        if(BRDFWeight.w == 0.0f || isnan(sampleColor.x)) continue;

        vec3 NeiborNormalWS = texture(inNormal, sampleUV).xyz;

        float normalWeight = clamp(dot(normalWS, NeiborNormalWS), 0.0f, 1.0f);

        vec3 weight = normalWeight * BRDFWeight.xyz;
        sampleColor.rgb /= 1 + Luminance(sampleColor.rgb);

        ReflectionColor += vec4(sampleColor.xyz * weight, sampleColor.w);
        totalWeight += vec4(weight, BRDFWeight.w);
    }

    ReflectionColor /= totalWeight;
    ReflectionColor.rgb /= 1 - Luminance(ReflectionColor.rgb);
    ReflectionColor.rgb = max(vec3(1e-5), ReflectionColor.rgb);

    imageStore(ReflectionColorMap, pixel, ReflectionColor);
}