#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

#include <Misc/Camera.glsl>

struct IndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 1) buffer DrawCommandBuffer 
{
    IndirectCommand commands[];
} drawCommandBuffer;

struct GPUInstanceData
{
    mat4 modelMatrix;
    vec3 AABBLocalMin;
    uint indexCount;
    vec3 AABBLocalMax;
    uint indexOffset;
    uint vertexCount;
    uint vertexOffset;
    uint instanceID;
    uint materialID;
};

layout(set = 0, binding = 2) buffer InstanceDatas
{
    GPUInstanceData instanceData[];
} instanceDatas;

layout(push_constant) uniform PushObject {
	uint instanceCount;
} object;

bool IsOutsideThePlane(vec4 plane, vec3 pointPosition)
{
    if(dot(plane.xyz, pointPosition) + plane.w < 0)
        return true;
    return false;
}

void main() {
    int idx = int(gl_GlobalInvocationID.x);
    if (idx >= int(object.instanceCount)) return;

    GPUInstanceData instance = instanceDatas.instanceData[idx];
    IndirectCommand cmd;
    cmd.indexCount = instance.indexCount;
    cmd.instanceCount = 1;
    cmd.firstIndex = instance.indexOffset;
    cmd.vertexOffset = int(instance.vertexOffset);
    cmd.firstInstance = instance.instanceID;


    vec4[6] planes = GetFrustumPlanes();

    mat4 M = instance.modelMatrix;
    vec3 boundMin = instance.AABBLocalMin;
    vec3 boundMax = instance.AABBLocalMax;

    vec4 boundVerts[8];
    boundVerts[0] = M * vec4(boundMin, 1);
    boundVerts[1] = M * vec4(boundMax, 1);
    boundVerts[2] = M * vec4(boundMax.x, boundMax.y, boundMin.z, 1);
    boundVerts[3] = M * vec4(boundMax.x, boundMin.y, boundMax.z, 1);
    boundVerts[6] = M * vec4(boundMax.x, boundMin.y, boundMin.z, 1);
    boundVerts[4] = M * vec4(boundMin.x, boundMax.y, boundMax.z, 1);
    boundVerts[5] = M * vec4(boundMin.x, boundMax.y, boundMin.z, 1);
    boundVerts[7] = M * vec4(boundMin.x, boundMin.y, boundMax.z, 1);

    //jugdement
    for (int i = 0; i < 6; i++)
    {
        if(cmd.instanceCount == 0) 
            break;
	    for(int j = 0; j < 8; j++)
	    {
	        vec3 boundPosition = boundVerts[j].xyz;

	        if(!IsOutsideThePlane(planes[i], boundPosition)) 
                break; 
	        if(j == 7)
		        cmd.instanceCount = 0;
	    }
    }

    drawCommandBuffer.commands[idx] = cmd;
}