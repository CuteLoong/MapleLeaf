#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set=0, binding=0) uniform UniformScene
{
    vec4 pixelSize; // camera's pixelWidth, pixelHeight, 1.0 / pixelWidth, 1.0f / pixelHeight
} scene;

layout(set=0, binding=1) uniform UniformGaussian {
    int radius;
} uniformGaussian;

layout (set = 0, binding = 2) buffer BufferWeight {
    float weights[]; 
} bufferWeight;

layout(set=0, binding = 3) uniform sampler2D inTexture;
layout(r32f, set = 0, binding = 4) uniform writeonly image2D GaussianX;

void main()
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= scene.pixelSize.x || pixel.y >= scene.pixelSize.y)
        return;

    vec2 uv = vec2(pixel) * scene.pixelSize.zw;
    vec4 color = vec4(0.0f);

    const int offset = -uniformGaussian.radius / 2;

    for (int i = 0; i <= uniformGaussian.radius; ++i)
    {
        color += texelFetch(inTexture, pixel + ivec2(offset + i, 0), 0) * bufferWeight.weights[i];
    }

    imageStore(GaussianX, pixel, color);
}