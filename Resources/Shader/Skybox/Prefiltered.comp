#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform PushObject {
	float roughness;
} object;

layout(set = 0, binding = 0, rgba32f) uniform writeonly imageCube outColour;

layout(set = 0, binding = 1) uniform samplerCube samplerColour;

const float PI = 3.1415926535897932384626433832795f;
const uint samples = 32u;

vec3 cubeDir(vec2 texCoord, uint side) {
	vec2 tex = texCoord * 2.0f - 1.0f;
	if(side == 0) return vec3(1.0f, -tex.y, -tex.x); // Front
	if(side == 1) return vec3(-1.0f, -tex.y, tex.x); // Back
	if(side == 2) return vec3(tex.x, 1.0f, tex.y); // Right
	if(side == 3) return vec3(tex.x, -1.0f, -tex.y); // Left
	if(side == 4) return vec3(tex.x, -tex.y, 1.0f); // Top
	if(side == 5) return vec3(-tex.x, -tex.y, -1.0f); // Bottom
	return vec3(1.0);
}

// Based omn http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
float random(vec2 co) {
	float a = 12.9898f;
	float b = 78.233f;
	float c = 43758.5453f;
	float dt = dot(co.xy, vec2(a, b));
	float sn = mod(dt, 3.14f);
	return fract(sin(sn) * c);
}

vec2 hammersley2d(uint i, uint N) {
	// Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
	uint bits = (i << 16u) | (i >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	float rdi = float(bits) * 2.3283064365386963e-10f;
	return vec2(float(i) / float(N), rdi);
}

// Based on http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf
vec3 importanceSample_GGX(vec2 Xi, float roughness, vec3 normal) {
	// Maps a 2D point to a hemisphere with spread based on roughness
	float alpha = roughness * roughness;
	float phi = 2.0f * PI * Xi.x + random(normal.xz) * 0.1f;
	float cosTheta = sqrt((1.0f - Xi.y) / (1.0f + (alpha * alpha - 1.0f) * Xi.y));
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
	vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);

	// Tangent space
	vec3 up = abs(normal.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
	vec3 tangentX = normalize(cross(up, normal));
	vec3 tangentY = normalize(cross(normal, tangentX));

	// Convert to world Space
	return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);
}

// Normal Distribution function
float D_GGX(float dotNH, float roughness) {
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0f) + 1.0f;
	return alpha2 / (PI * denom * denom); 
}

vec3 prefilterEnvMap(samplerCube envmap, vec3 R, float roughness) {
	vec3 N = R;
	vec3 V = R;
	vec3 colour = vec3(0.0f);
	float totalWeight = 0.0f;
	float envMapDim = float(textureSize(envmap, 0).s);

	for (uint i = 0u; i < samples; i++) {
		vec2 Xi = hammersley2d(i, samples);
		vec3 H = importanceSample_GGX(Xi, roughness, N);
		vec3 L = 2.0f * dot(V, H) * H - V;
		float dotNL = clamp(dot(N, L), 0.0f, 1.0f);

		if (dotNL > 0.0f) {
			// Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/

			float dotNH = clamp(dot(N, H), 0.0f, 1.0f);
			float dotVH = clamp(dot(V, H), 0.0f, 1.0f);

			// Probability Distribution Function
			float pdf = D_GGX(dotNH, roughness) * dotNH / (4.0f * dotVH) + 0.0001f;
			// Solid angle of current sample
			float omegaS = 1.0f / (float(samples) * pdf);
			// Solid angle of 1 pixel across all cube faces
			float omegaP = 4.0f * PI / (6.0f * envMapDim * envMapDim);
			// Biased (+1.0) mip level for better result
			float mipLevel = roughness == 0.0f ? 0.0f : max(0.5f * log2(omegaS / omegaP) + 1.0f, 0.0f);
			colour += textureLod(envmap, L, mipLevel).rgb * dotNL;
			totalWeight += dotNL;
		}
	}

	return (colour / totalWeight);
}

void main() {
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5f)) / vec2(imageSize(outColour).xy);

	for (uint i = 0; i != 6; ++i) {
		vec3 R = normalize(cubeDir(uv, i));
		imageStore(outColour, ivec3(gl_GlobalInvocationID.xy, i), vec4(prefilterEnvMap(samplerColour, R, object.roughness), 1.0f));
	}
}
