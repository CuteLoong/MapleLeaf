#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_shader_atomic_float : enable

#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 32, local_size_y = 16, local_size_z = 1) in;

layout(push_constant) uniform PushObject {
	float alpha;
} object;

layout(set=0, binding=1) uniform sampler2D lighting;
layout(set=0, binding=2) uniform sampler2D prevLighting;
layout(set=0, binding=3) uniform sampler2D depth;
layout(set=0, binding=4) uniform sampler2D prevDepth;
layout(set=0, binding=5) uniform sampler2D motionVector;
layout(set=0, binding=6) uniform sampler2D prevMotionVector;
layout(set=0, binding=7) uniform isampler2D Zero2OneDepth_Int;
layout(set=0, binding=8) uniform isampler2D One2ZeroDepth_Int;

layout(set=0, binding=9, rgba32f) uniform image2D Zero2OneColor;
layout(set=0, binding=10, r32f) uniform image2D Zero2OneDepth;
layout(set=0, binding=11, rgba32f) uniform image2D One2ZeroColor;
layout(set=0, binding=12, r32f) uniform image2D One2ZeroDepth;
layout(set=0, binding=13) writeonly uniform image2D BlockZero2Alpha;
layout(set=0, binding=14) writeonly uniform image2D BlockOne2Alpha;

#include <Misc/Camera.glsl>

// #define alpha 0.6

void main()
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;

    vec2 mv = texelFetch(motionVector, pixel, 0).xy * (1.0 - object.alpha);
    vec2 prevMV = texelFetch(prevMotionVector, pixel, 0).xy * object.alpha;

    vec3 current_color = texture(lighting, screenUV).xyz;
    vec3 prev_color = texture(prevLighting, screenUV).xyz;

    float current_depth = texelFetch(depth, pixel, 0).r;
    float prev_depth = texelFetch(prevDepth, pixel, 0).r;

    vec2 zero2alphaScreenUV = screenUV + prevMV;
    vec2 one2alphaScreenUV = screenUV - mv;

    bool valid_zero2alpha = zero2alphaScreenUV.x >= 0.0f && zero2alphaScreenUV.x <= 1.0f && zero2alphaScreenUV.y >= 0.0f && zero2alphaScreenUV.y <= 1.0f;
    bool valid_one2alpha = one2alphaScreenUV.x >= 0.0f && one2alphaScreenUV.x <= 1.0f && one2alphaScreenUV.y >= 0.0f && one2alphaScreenUV.y <= 1.0f;

    vec2 zero2onePixel = zero2alphaScreenUV * camera.pixelSize.xy;
    vec2 one2zeroPixel = one2alphaScreenUV * camera.pixelSize.xy;

    int current_depth_int = floatBitsToInt(current_depth);
    int prev_depth_int = floatBitsToInt(prev_depth);

    int rawDepth_021 = texelFetch(Zero2OneDepth_Int, ivec2(zero2onePixel), 0).r;
    int rawDepth_120 = texelFetch(One2ZeroDepth_Int, ivec2(one2zeroPixel), 0).r;

    vec3 blockColor = vec3(0.0f);
    if(screenUV.x < 0.5f && screenUV.y > 0.5f) {
        vec3 lerpC = vec3(mix(0.5f, 1.0f, screenUV.x * 2), mix(0.5f, 1.0f, (screenUV.y - 0.5f) * 2), 0.0f); 
        blockColor = vec3(1.0f, 1.0f, 0.0f) * lerpC;
    }
    else if(screenUV.x > 0.5f && screenUV.y < 0.5f) {
        vec3 lerpC = vec3(0.0f, mix(0.5f, 1.0f, (screenUV.x - 0.5f) * 2), mix(0.5f, 1.0f, screenUV.y * 2));
        blockColor = vec3(0.0f, 1.0f, 1.0f) * lerpC;
    }
    else if(screenUV.x < 0.5f && screenUV.y < 0.5f) {
        vec3 lerpC = vec3(mix(0.5f, 1.0f, screenUV.x * 2), 0.0f, mix(0.5f, 1.0f, screenUV.y * 2));
        blockColor = vec3(1.0f, 0.0f, 1.0f) * lerpC;
    }
    else if(screenUV.x > 0.5f && screenUV.y > 0.5f) {
        float lerpC = mix(0.5f, 1.0f, screenUV.x * 2 - 1.0f);
        blockColor = vec3(1.0f, 1.0f, 1.0f) * lerpC;
    }

    if(rawDepth_021 == prev_depth_int && valid_zero2alpha) {
        imageStore(Zero2OneColor, ivec2(zero2onePixel), vec4(prev_color, 1.0f));
        imageStore(BlockZero2Alpha, ivec2(zero2onePixel), vec4(blockColor, 1.0f));
    }
    if(rawDepth_120 == current_depth_int && valid_one2alpha) {
        imageStore(One2ZeroColor, ivec2(one2zeroPixel), vec4(current_color, 1.0f));
        imageStore(BlockOne2Alpha, ivec2(one2zeroPixel), vec4(blockColor, 1.0f));
    }

    imageStore(Zero2OneDepth, ivec2(zero2onePixel), vec4(intBitsToFloat(rawDepth_021)));
    imageStore(One2ZeroDepth, ivec2(one2zeroPixel), vec4(intBitsToFloat(rawDepth_120)));
}
