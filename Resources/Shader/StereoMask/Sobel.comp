#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 32, local_size_y = 8) in;

layout(set = 0, binding = 1) uniform sampler2D inputImage;
layout(set = 0, binding = 2) uniform writeonly image2D outputImage;

#include <Misc/Camera.glsl>

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    // Sobel kernel
    mat3 kernel = mat3(
        -1, -2, -1,
         0,  0,  0,
         1,  2,  1
    );

    float sumX = 0.0f;
    float sumY = 0.0f;

    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            ivec2 neighborCoord = pixel + ivec2(i, j);
            float pixelValue = texelFetch(inputImage, neighborCoord, 0).g;
            sumX += pixelValue * kernel[i + 1][j + 1];
            sumY += pixelValue * kernel[j + 1][i + 1]; // Swap indices to compute the Y gradient
        }
    }

    float magnitude = length(vec2(sumX, sumY));

    imageStore(outputImage, pixel, vec4(magnitude, magnitude, magnitude, 1.0f));
}
