#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

layout(set = 0, binding = 1) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 2, rgba32f) writeonly uniform image2D image;
layout(set = 0, binding = 13) writeonly uniform image2D indirectLightResult;

layout(set = 0, binding = 3) uniform UniformFrameData {
    uint frameID;
    uint spp;
    uint maxDepth;
} uniformFrameData;

#include <Misc/Camera.glsl>
#include <Misc/RayTracingCommon.glsl>
#include <Sampling/TinyEncryptionSample.glsl>

layout(location = 0) rayPayloadEXT HitPayLoad prd;

vec3 toneMapAces(vec3 color)
{
    // Cancel out the pre-exposure mentioned in
    // https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
    color *= 0.6;

    float A = 2.51;
    float B = 0.03;
    float C = 2.43;
    float D = 0.59;
    float E = 0.14;

    color = clamp((color*(A*color+B))/(color*(C*color+D)+E), 0.0f, 1.0f);
    return color;
}

vec3 toneMap(vec3 color) {
    return toneMapAces(color);
}

void main() 
{
    const vec2 stereoSize = vec2(gl_LaunchSizeEXT.x / 2.0f, gl_LaunchSizeEXT.y);
    const int viewIndex = gl_LaunchIDEXT.x < stereoSize.x ? 0 : 1;

    const vec2 pixelIndex = vec2(gl_LaunchIDEXT.x - stereoSize.x * float(viewIndex), gl_LaunchIDEXT.y);

    const vec2 pixelCenter = vec2(pixelIndex) + vec2(0.5);
    const vec2 pixelUV     = pixelCenter / stereoSize;
    vec2 d = pixelUV * 2.0f - 1.0f;
    
    vec4 origin = camera.cameraStereoPosition[viewIndex];
    vec4 target = camera.invStereoProjection[viewIndex] * (vec4(d.x, d.y, -1.0f, 1.0f));
    vec4 direction = normalize(camera.invView * vec4(normalize(target.xyz), 0.0));

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 300.0;

    vec3 hitValue = vec3(0.0f);
    vec3 indirectLight = vec3(0.0f);
    for(int i = 0; i < uniformFrameData.spp; i++) {
        uint seed = TinyEncryptionInit(uint(pixelIndex.x + pixelIndex.x * pixelIndex.y), uniformFrameData.frameID + i);
        prd.randomSeed = seed;

        prd.Lo = vec3(0.0f);
        prd.depth = 0;
        prd.accBRDF = vec3(1.0f);
        prd.done = 1;
        prd.nextOrigin = origin;
        prd.accPDF = 1.0f;
        prd.nextDir = direction;
        prd.cameraOrigin = origin;

        vec3 rayDirection = prd.nextDir.xyz;
        vec3 rayOrigin = prd.nextOrigin.xyz;

        for(;;) {
            traceRayEXT(topLevelAS, rayFlags, 0xFF, 0, 0, 0, rayOrigin, tMin, rayDirection, tMax, 0);
            // hitValue += prd.Lo;

            prd.depth++;

            if (prd.done == 1 || prd.depth >= uniformFrameData.maxDepth) {
                indirectLight += prd.Lo;
                break;
            }

            rayDirection = prd.nextDir.xyz;
            rayOrigin = prd.nextOrigin.xyz;
            prd.done = 1;
        }
    }
    hitValue /= uniformFrameData.spp;
    indirectLight /= uniformFrameData.spp;

    // indirectLight = pow(toneMap(indirectLight), vec3(1.0f / 2.2f));

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(indirectLight, 1.0f));
    // imageStore(indirectLightResult, ivec2(gl_LaunchIDEXT.xy), vec4(indirectLight, 1.0f));
}
