#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#define RAY_MARCH_ORIGIN_OFFSET_EPSILON 0.1
#define HIZ_STEP_EPSILON 0.00001

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set=0, binding=1) uniform UniformSSRData {
	float maxRayLength;
    float maxSteps;
    float zThickness;
    float fadeValue;
    
    float hiZStartLevel;
    float hiZMaxLevel;
} ssrData;

layout(set=0, binding=2) uniform sampler2D inDepth;
layout(set=0, binding=3) uniform sampler2D inNormal;

#if (TRAVERSAL_SCHEME_MIN_HI_Z == 1)
    layout(set=0, binding=5) uniform sampler2D inMinHiZ;
#elif (TRAVERSAL_SCHEME_MIN_MAX_HI_Z == 1)
    layout(set=0, binding=5) uniform sampler2D inMinHiZ;
    layout(set=0, binding=6) uniform sampler2D inMaxHiZ;
#endif

layout(set=0, binding=4, rgba8) writeonly uniform image2D SSRHitsMap;

#include <Misc/Camera.glsl>
#include <Misc/Utils.glsl>

float calculateFadeAmount(vec2 positionUV){
    float borderDist = min(1.0f - max(positionUV.x, positionUV.y), min(positionUV.x, positionUV.y));
    return clamp(borderDist > ssrData.fadeValue ? 1.0f : borderDist / ssrData.fadeValue, 0.0f, 1.0f);
}

bool intersectsDepthBuffer(float sceneZMax, float sceneZMin, float rayZ)
{
    return (rayZ >= sceneZMin) && (rayZ <= sceneZMax);
}

#if(TRAVERSAL_SCHEME_RAY_MARCH_3D == 1)
bool rayMarch3D(vec3 originVS, vec3 reflectDirVS, int viewIndex, float maxRayLength, inout vec3 hitPointSS)
{
    originVS = originVS + reflectDirVS * RAY_MARCH_ORIGIN_OFFSET_EPSILON;

    float sceneZMax = 1.0f;
    float sceneZMin = 0.0f;

    float deltaT = maxRayLength / ssrData.maxSteps;
    float t = 0.0f;
    vec3 raySS = vec3(-1.0f, -1.0f, camera.projectionParams.z);
    bool outOfBounds = false;

    for(float i = 0.0f; i < ssrData.maxSteps; i++) {
        t += deltaT;
        vec3 rayVS = originVS + reflectDirVS * t;
        vec4 rayHS = camera.stereoProjection[viewIndex] * vec4(rayVS, 1.0f);
        raySS = rayHS.xyz / rayHS.w;
        raySS.xy = raySS.xy * 0.5f + 0.5f;
        raySS.y = 1.0f - raySS.y; // flip y
        raySS.z = Linear01Depth(raySS.z); // linear depth

        sceneZMin = Linear01Depth(texture(inDepth, StereoUVToScreenUV(raySS.xy, viewIndex)).x);
        outOfBounds = (sceneZMin == 1.0f);

        if(outOfBounds) break;

        sceneZMax = sceneZMin + ssrData.zThickness;

        if(intersectsDepthBuffer(sceneZMax, sceneZMin, raySS.z)) {
            break;
        }
    }
    hitPointSS = vec3(raySS.xy, sceneZMax);

    return (sceneZMin > raySS.z) || (raySS.z > sceneZMax); // return true if we missed
}
#endif

#if (TRAVERSAL_SCHEME_MIN_HI_Z == 1 || TRAVERSAL_SCHEME_MIN_MAX_HI_Z == 1)

ivec2 GetHiZLevelSize(float mipLevel)
{
    return ivec2(max(1, camera.stereoPixelSize.x / pow(2.0f, mipLevel)), max(1, camera.stereoPixelSize.y / pow(2.0f, mipLevel)));
}

ivec2 GetHizPixel(vec2 pointXY, vec2 levelSize)
{
    return ivec2(floor((pointXY.x) * levelSize.x), floor(pointXY.y * levelSize.y));
}

#endif

#if (TRAVERSAL_SCHEME_MIN_HI_Z == 1)

float GetZMinFromHiZ(vec2 pixel, float mipLevel, float levelSizeX, int viewIndex)
{
    ivec2 screenPixel = ivec2(pixel.x + viewIndex * levelSizeX, pixel.y);
    return Linear01Depth(texelFetch(inMinHiZ, screenPixel, int(mipLevel)).x);
}

void minHizTraversalLoop(vec2 step, vec2 stepOffset, vec2 stepEye2, vec2 stepOffsetEye2, vec3 pointSS0, vec3 rayDir, vec2 pointSS0Eye2XY, vec2 rayDirEye2XY, float calcT0, float calcT1, inout int viewIndex, inout float mipLevel, inout float tParameter, inout vec2 tSceneZMinMax)
{
    float iterations = 0.0f;
    int curViewIndex = viewIndex;
    vec2 curStep = step;
    vec2 curStepOffset = stepOffset;
    vec2 curSS0 = pointSS0.xy;
    vec2 curRayDir = rayDir.xy;
    while(mipLevel >= 0.0f && iterations < ssrData.maxSteps && tParameter <= 1.0f) {
        iterations++;

        vec2 maxRayPointXY = curSS0 + curRayDir * tParameter;

        bool outOfBounds = (maxRayPointXY.x < 0.0f) || (maxRayPointXY.x > 1.0f) || (maxRayPointXY.y > 1.0f || maxRayPointXY.y < 0.0f);
        bool useOtherEyeInfo = (curViewIndex == 1 && maxRayPointXY.x < 0.0f) || (curViewIndex == 0 && maxRayPointXY.x >= 1.0f);
        if(outOfBounds && !useOtherEyeInfo) {
            tParameter = 1.0f;
            break;
        }
        else {
            curViewIndex = useOtherEyeInfo ? 1 - curViewIndex : curViewIndex;
            curStep = (curViewIndex == viewIndex) ? step : stepEye2;
            curStepOffset = (curViewIndex == viewIndex) ? stepOffset : stepOffsetEye2;
            curSS0 = (curViewIndex == viewIndex) ? pointSS0.xy : pointSS0Eye2XY;
            curRayDir = (curViewIndex == viewIndex) ? rayDir.xy : rayDirEye2XY;
            maxRayPointXY = curSS0 + curRayDir * tParameter;
        }
        
        ivec2 levelSize = GetHiZLevelSize(mipLevel);
        ivec2 pixel = GetHizPixel(maxRayPointXY, levelSize);

        vec2 tPixelXY = ((pixel + curStep) / levelSize + curStepOffset - curSS0) / curRayDir;
        float tPixel = min(tPixelXY.x, tPixelXY.y);

        vec2 sceneZMinMax;
        sceneZMinMax.x = GetZMinFromHiZ(pixel, mipLevel, levelSize.x, curViewIndex);
        tSceneZMinMax.x = (1.0f / sceneZMinMax.x + calcT0) * calcT1;

        mipLevel--;
        if(tSceneZMinMax.x <= tPixel) {
            tParameter = max(tParameter, tSceneZMinMax.x);
            if(mipLevel == -1.0f) {
                sceneZMinMax.y = sceneZMinMax.x + ssrData.zThickness;
                tSceneZMinMax.y = (1.0f / sceneZMinMax.y + calcT0) * calcT1;
                if(tParameter > tSceneZMinMax.y) {
                    curViewIndex = 1 - curViewIndex;
                    curStep = (curViewIndex == viewIndex) ? step : stepEye2;
                    curStepOffset = (curViewIndex == viewIndex) ? stepOffset : stepOffsetEye2;
                    curSS0 = (curViewIndex == viewIndex) ? pointSS0.xy : pointSS0Eye2XY;
                    curRayDir = (curViewIndex == viewIndex) ? rayDir.xy : rayDirEye2XY;

                    tParameter = tPixel;
                    mipLevel = min(ssrData.hiZMaxLevel, mipLevel + 2.0f);
                }
            }
        }
        else {
            tParameter = tPixel;
            mipLevel = min(ssrData.hiZMaxLevel, mipLevel + 2.0f);
        }
    } 
    viewIndex = curViewIndex;
}
#endif

#if (TRAVERSAL_SCHEME_MIN_MAX_HI_Z == 1)

vec2 GetZMinMaxFromHiZ(ivec2 pixel, float mipLevel, int levelSizeX, int viewIndex)
{
    vec2 zMinMax;
    ivec2 screenPixel = ivec2(pixel.x + viewIndex * levelSizeX, pixel.y);
    zMinMax.x = Linear01Depth(texelFetch(inMinHiZ, screenPixel, int(mipLevel)).x);
    zMinMax.y = Linear01Depth(texelFetch(inMaxHiZ, screenPixel, int(mipLevel)).x);
    return zMinMax;
}

void minMaxHiZTraversalLoop(vec2 step, vec2 stepOffset, vec2 stepEye2, vec2 stepOffsetEye2, vec3 pointSS0, vec3 rayDir, vec2 pointSS0Eye2XY, vec2 rayDirEye2XY, float calcT0, float calcT1, inout int viewIndex, inout float mipLevel, inout float tParameter, inout vec2 tSceneZMinMax)
{
    float iterations = 0.0f;
    int curViewIndex;
    while(mipLevel >= 0.0f && iterations < ssrData.maxSteps && tParameter <= 1.0f) {
        iterations++;
        curViewIndex = viewIndex;

        vec2 maxRayPointXY = pointSS0.xy + rayDir.xy * tParameter;
        vec2 maxRayPointXY2 = pointSS0Eye2XY + rayDirEye2XY * tParameter;

        bool outOfBounds1 = (maxRayPointXY.x < 0.0f) || (maxRayPointXY.x > 1.0f) || (maxRayPointXY.y > 1.0f || maxRayPointXY.y < 0.0f);
        bool outOfBounds2 = (maxRayPointXY2.x < 0.0f) || (maxRayPointXY2.x > 1.0f) || (maxRayPointXY2.y > 1.0f || maxRayPointXY2.y < 0.0f);

        if(outOfBounds1 && outOfBounds2) {
            tParameter = 1.0f;
            break;
        }

        ivec2 levelSize = GetHiZLevelSize(mipLevel);
        ivec2 pixel = GetHizPixel(maxRayPointXY, levelSize);

        vec2 tPixelXY = ((pixel + step) / levelSize + stepOffset - pointSS0.xy) / rayDir.xy;
        float tPixel = min(tPixelXY.x, tPixelXY.y);

        vec2 sceneZMinMax = GetZMinMaxFromHiZ(pixel, mipLevel, levelSize.x, viewIndex);
        tSceneZMinMax = (1.0f / sceneZMinMax + vec2(calcT0)) * calcT1;

        // use another eyes info
        if(tSceneZMinMax.y < tParameter || (outOfBounds1 && !outOfBounds2)) {
            curViewIndex = 1 - curViewIndex;
            maxRayPointXY = pointSS0Eye2XY + rayDirEye2XY * tParameter;
            pixel = GetHizPixel(maxRayPointXY, levelSize);

            tPixelXY = ((pixel + stepEye2) / levelSize + stepOffsetEye2 - pointSS0Eye2XY) / rayDirEye2XY;
            tPixel = min(tPixelXY.x, tPixelXY.y);
            sceneZMinMax = GetZMinMaxFromHiZ(pixel, mipLevel, levelSize.x, curViewIndex);
            tSceneZMinMax = (1.0f / sceneZMinMax + vec2(calcT0)) * calcT1;
        }

        mipLevel--;
        if(tSceneZMinMax.x <= tPixel && tParameter <= tSceneZMinMax.y) {
            tParameter = max(tParameter, tSceneZMinMax.x);
        }
        else {
            tParameter = tPixel;
            mipLevel = min(ssrData.hiZMaxLevel, mipLevel + 2.0f);
        }
    }
    viewIndex = curViewIndex;
}

#endif


#if (TRAVERSAL_SCHEME_MIN_HI_Z == 1 || TRAVERSAL_SCHEME_MIN_MAX_HI_Z == 1)
bool hiZTracing(vec3 pointSS0, vec3 pointSS1, vec3 pointSS0Eye2, vec3 pointSS1Eye2, inout int viewIndex, inout vec3 hitPointSS)
{
    pointSS0.z = Linear01Depth(pointSS0.z);
    pointSS1.z = Linear01Depth(pointSS1.z);

    vec3 rayDir = pointSS1 - pointSS0;
    vec2 rayDirEye2XY = pointSS1Eye2.xy - pointSS0Eye2.xy;

    vec2 stepSign;
    stepSign.x = (rayDir.x >= 0) ? 1.0f : -1.0f;
    stepSign.y = (rayDir.y >= 0) ? 1.0f : -1.0f;
    vec2 stepOffset = HIZ_STEP_EPSILON * stepSign.xy;

    vec2 stepSignEye2;
    stepSignEye2.x = (rayDirEye2XY.x >= 0) ? 1.0f : -1.0f;
    stepSignEye2.y = (rayDirEye2XY.y >= 0) ? 1.0f : -1.0f;
    vec2 stepOffsetEye2 = HIZ_STEP_EPSILON * stepSignEye2.xy;

    vec2 step = clamp(stepSign.xy, 0.0f, 1.0f); // if rayDir is negative, offset will make it to else pixel
    vec2 stepEye2 = clamp(stepSignEye2.xy, 0.0f, 1.0f);

    float pointSS0InvZ = 1.0f / pointSS0.z;
    float pointSS1InvZ = 1.0f / pointSS1.z;

    float interpPoint = pointSS0InvZ;
    float interpVec = pointSS1InvZ - pointSS0InvZ;

    // claculate tParameter (1/z - 1/z0) / (1/z1 - 1/z0)
    float calcT0 = -pointSS0InvZ;
    float calcT1 = 1.0f / (pointSS1InvZ - pointSS0InvZ);

    vec2 levelSize = GetHiZLevelSize(0.0f);
    vec2 pixel = GetHizPixel(pointSS0.xy, levelSize); // pixel must in stereo texture [960, 1080]

    vec2 tStartPixelXY = ((pixel + step) / levelSize + stepOffset - pointSS0.xy) / rayDir.xy;
    float tParameter = min(tStartPixelXY.x, tStartPixelXY.y);
    vec2 tSceneZMinMax = vec2(0.0f, 1.0f);
    float mipLevel = ssrData.hiZStartLevel; // set to 2
    int rawViewIndex = viewIndex;

#if (TRAVERSAL_SCHEME_MIN_HI_Z == 1)
    minHizTraversalLoop(step, stepOffset, stepEye2, stepOffsetEye2, pointSS0, rayDir, pointSS0Eye2.xy, rayDirEye2XY, calcT0, calcT1, viewIndex, mipLevel, tParameter, tSceneZMinMax);
#elif (TRAVERSAL_SCHEME_MIN_MAX_HI_Z == 1)
    minMaxHiZTraversalLoop(step, stepOffset, stepEye2, stepOffsetEye2, pointSS0, rayDir, pointSS0Eye2.xy, rayDirEye2XY, calcT0, calcT1, viewIndex, mipLevel, tParameter, tSceneZMinMax);
#endif

    // hitPointSS = pointSS0 + rayDir * tParameter;
    hitPointSS = (rawViewIndex == viewIndex) ? vec3(pointSS0.xy + rayDir.xy * tParameter, 1.0f / (interpPoint + interpVec * tParameter)) : vec3(pointSS0Eye2.xy + rayDirEye2XY * tParameter, 1.0f / (interpPoint + interpVec * tParameter));

    return (mipLevel != -1.0f) || (tParameter < tSceneZMinMax.x) || (tParameter > tSceneZMinMax.y);
}
#endif



void main() 
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    int viewIndex = pixel.x < (camera.pixelSize.x / 2) ? 0 : 1;
    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;

    vec3 pointSS0 = vec3(ScreenUVToStereoUV(screenUV, viewIndex), texture(inDepth, screenUV).x);

    vec3 normalVS = normalize(mat3(transpose(inverse(camera.stereoView[viewIndex]))) * texture(inNormal, screenUV).xyz);
    vec3 originVS = StereoViewSpacePosAtScreenUV(screenUV, viewIndex);
    vec3 viewRayVS = normalize(originVS);

    vec3 reflectDirVS = normalize(reflect(viewRayVS, normalVS));
    float maxRayLength = min((camera.projectionParams.z * camera.projectionParams.x - originVS.z) / reflectDirVS.z, ssrData.maxRayLength);
    vec3 endPointVS = originVS + reflectDirVS * maxRayLength;

    vec4 pointHS1 = camera.stereoProjection[viewIndex] * vec4(endPointVS, 1.0f);
    vec3 pointSS1 = pointHS1.xyz / pointHS1.w; // depth is hyperbolic depth
    pointSS1.xy = pointSS1.xy * 0.5f + 0.5f;
    pointSS1.y = 1.0f - pointSS1.y; // flip y

    vec4 pointHS0Eye2 = camera.stereoProjection[1 - viewIndex] * camera.stereoView[1 - viewIndex] * camera.invStereoView[viewIndex] * vec4(originVS, 1.0f);
    vec4 pointHS1Eye2 = camera.stereoProjection[1 - viewIndex] * camera.stereoView[1 - viewIndex] * camera.invStereoView[viewIndex] * vec4(endPointVS, 1.0f);
    vec3 pointSS0Eye2 = pointHS0Eye2.xyz / pointHS0Eye2.w;
    vec3 pointSS1Eye2 = pointHS1Eye2.xyz / pointHS1Eye2.w;
    pointSS0Eye2.xy = pointSS0Eye2.xy * 0.5f + 0.5f;
    pointSS0Eye2.y = 1.0f - pointSS0Eye2.y; // flip y
    pointSS1Eye2.xy = pointSS1Eye2.xy * 0.5f + 0.5f;
    pointSS1Eye2.y = 1.0f - pointSS1Eye2.y; // flip y

    vec3 hitPointSS = vec3(-1.0f);
    bool missed = true;

    // camera is looking down -z
    if(reflectDirVS.z < 0.0f) {
        #if (TRAVERSAL_SCHEME_RAY_MARCH_3D == 1)
            missed = rayMarch3D(originVS, reflectDirVS, viewIndex, maxRayLength, hitPointSS);
        #elif (TRAVERSAL_SCHEME_MIN_HI_Z == 1) || (TRAVERSAL_SCHEME_MIN_MAX_HI_Z == 1)
            missed = hiZTracing(pointSS0, pointSS1, pointSS0Eye2, pointSS1Eye2, viewIndex, hitPointSS);
        #else 
            #error "Traversal scheme not defined"
        #endif
    }

    float alphaBlend = 0.0f;
    if(missed) {
        hitPointSS.xy = vec2(-1.0f);
    }
    else {
        hitPointSS.xy = StereoUVToScreenUV(hitPointSS.xy, viewIndex);
        alphaBlend = calculateFadeAmount(hitPointSS.xy);
    }

    imageStore(SSRHitsMap, pixel, vec4(hitPointSS, alphaBlend));
}