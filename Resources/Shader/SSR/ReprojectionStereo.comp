#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 32, local_size_y = 16, local_size_z = 1) in;

layout(set=0, binding=1) uniform sampler2D LightingMap;
layout(set=0, binding=2) uniform sampler2D SSRHitsMap;
layout(set=0, binding=3) uniform sampler2D SSRHitsMask;
layout(set=0, binding=4) uniform sampler2D GlossyMV;

layout(set=0, binding=5) writeonly uniform image2D ReprojectionReflectionColorMap;

#include <Misc/Camera.glsl>

float Luminance(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    int viewIndex = pixel.x < (camera.pixelSize.x / 2) ? 0 : 1;
    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;

    vec3 glossyMV = texture(GlossyMV, screenUV).xyz;
    vec2 anotherUV = screenUV + glossyMV.xy;

    vec4 finalColor = vec4(0.0f);

    bool reuse = false;

    // if(glossyMV.x != 0.0f && glossyMV.y != 0.0f) {
    //     float curReflectDepth = glossyMV.z;
    //     float anotherReflectDepth = texture(GlossyMV, anotherUV).z;

    //     if(abs(curReflectDepth - anotherReflectDepth) < 0.001f) reuse = true;
    // }

    vec4 hitInfo = texelFetch(SSRHitsMap, ivec2(screenUV * camera.pixelSize.xy), 0); // xy: hitUV, z: hitDepth, w: pdf
    vec4 sampleColor1 = vec4(texture(LightingMap, hitInfo.xy).xyz, texture(SSRHitsMask, screenUV).x);

    sampleColor1 /= 1.0f + Luminance(sampleColor1.xyz);

    if(reuse) {
        vec4 hitInfo2 = texelFetch(SSRHitsMap, ivec2((anotherUV) * camera.pixelSize.xy), 0); // xy: hitUV, z: hitDepth, w: pdf
        vec4 sampleColor2 = vec4(texture(LightingMap, hitInfo2.xy).xyz, texture(SSRHitsMask, anotherUV).x);
        finalColor = (sampleColor1 + sampleColor2) / 2.0f; 
    }
    else {
        finalColor = sampleColor1;
    }

    finalColor /= 1.0f - Luminance(finalColor.xyz);

    imageStore(ReprojectionReflectionColorMap, pixel, finalColor);
}
