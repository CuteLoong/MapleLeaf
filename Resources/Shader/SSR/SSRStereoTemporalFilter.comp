#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#define SSR_TEMPORAL_WEIGHT 0.98

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set=0, binding=1) uniform sampler2D inDepth;
layout(set=0, binding=2) uniform sampler2D SSRHitsMap;
layout(set=0, binding=3) uniform sampler2D PrevSSRColor; 
layout(set=0, binding=4) uniform sampler2D CurSSRColor; // after spatial filtering

layout(set=0, binding=5) writeonly uniform image2D TemporalSSRColor;

#include <Misc/Camera.glsl>
#include <Misc/Utils.glsl>
#include <Misc/Constants.glsl>

float Luminance(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

void ResolverAABB(sampler2D currColor, float Sharpness, float ExposureScale, float AABBScale, vec2 uv, vec2 TexelSize, inout float Variance, inout vec4 MinColor, inout vec4 MaxColor, inout vec4 FilterColor)
{
    const vec2 offset[9] = {vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0), vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0)};
    vec4 SampleColors[9];

    for(int i = 0; i < 9; i++)
    {
        vec2 sampleUV = uv + offset[i] * TexelSize;
        SampleColors[i] = textureLod(currColor, sampleUV, 0);
    }

    vec4 m1 = vec4(0.0f);
    vec4 m2 = vec4(0.0f);

    for(uint x = 0; x < 9; x++) 
    {
        m1 += SampleColors[x];
        m2 += SampleColors[x] * SampleColors[x];
    }

    vec4 mean = m1 / 9.0f;
    vec4 stddev = sqrt((m2 / 9.0) - mean * mean);

    MinColor = mean - AABBScale * stddev;
    MaxColor = mean + AABBScale * stddev;

    FilterColor = SampleColors[4];
    MinColor = min(MinColor, FilterColor);
    MaxColor = max(MaxColor, FilterColor);

    float TotalVariation = 0.0f;
    for(uint x = 0; x < 9; x++)
    {
        TotalVariation += pow(Luminance(SampleColors[x].xyz) - Luminance(mean.xyz), 2.0f);
    }

    Variance = clamp((TotalVariation / 9.0f) * 256.0f, 0.0f, 1.0f);
    Variance *= FilterColor.w;
}

void main()
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    int viewIndex = pixel.x < (camera.pixelSize.x / 2) ? 0 : 1;
    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;

    float depth = textureLod(inDepth, screenUV, 0).x;

    // get ray-based motion vector
    vec3 positionVS = ViewSpacePosAtScreenUV(screenUV);
    vec4 positionWS = camera.invStereoView[viewIndex] * vec4(positionVS, 1.0f);

    vec4 prevPositionHS = camera.prevStereoProjection[viewIndex] * camera.prevStereoView[viewIndex] * positionWS;
    vec4 curPositionHS = camera.stereoProjection[viewIndex] * camera.stereoView[viewIndex] * positionWS;

    vec2 prevScreenUV = (prevPositionHS.xy / prevPositionHS.w) * 0.5f + 0.5f;
    vec2 curScreenUV = (curPositionHS.xy / curPositionHS.w) * 0.5f + 0.5f;
    vec2 motionVector = curScreenUV - prevScreenUV;

    float SSRVariation = 0.0f;
    vec4 SSRCurColor = vec4(0.0f);
    vec4 SSRMinColor = vec4(0.0f);
    vec4 SSRMaxColor = vec4(0.0f);

    ResolverAABB(CurSSRColor, 0.0f, 10.0f, 1.25f, screenUV, camera.pixelSize.zw, SSRVariation, SSRMinColor, SSRMaxColor, SSRCurColor);

    vec4 SSRPrevColor = textureLod(PrevSSRColor, screenUV, 0);
    SSRPrevColor = clamp(SSRPrevColor, SSRMinColor, SSRMaxColor);

    float temporalBlendWeight = clamp(SSR_TEMPORAL_WEIGHT * (1.0f - length(motionVector) * 8.0f), 0.0f, 1.0f);
    vec4 SSRColor = mix(SSRCurColor, SSRPrevColor, temporalBlendWeight);
    
    imageStore(TemporalSSRColor, pixel, SSRColor);
}