#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#define RAY_MARCH_ORIGIN_OFFSET_EPSILON 0.1
#define HIZ_STEP_EPSILON 0.00001
#define FADE_START 0.8
#define FADE_END 1.0

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set=0, binding=1) uniform UniformSSRData {
	float maxRayLength;
    float maxSteps;
    float zThickness;
    float brdfBias;
    
    float hiZStartLevel;
    float hiZMaxLevel;
    vec2 noiseScale;
} ssrData;

layout(set = 0, binding = 2) uniform UniformJitterData {
    vec2 jitter;
} jitterData;

layout(set=0, binding=3) uniform sampler2D inDepth;
layout(set=0, binding=4) uniform sampler2D inNormal;
layout(set=0, binding=5) uniform sampler2D inMaterial;
layout(set=0, binding=6) uniform sampler2D inInstanceID;

layout(set=0, binding=7) uniform sampler2D inMinHiZLeft;
layout(set=0, binding=8) uniform sampler2D inMinHiZRight;

layout(set=0, binding=9) uniform sampler2D inMaxHiZLeft;
layout(set=0, binding=10) uniform sampler2D inMaxHiZRight;

layout(set=0, binding=11) uniform sampler2D blueNoise;
layout(set=0, binding=12) writeonly uniform image2D SSRHitsMap;
layout(set=0, binding=13) writeonly uniform image2D SSRMask;
layout(set=0, binding=14) writeonly uniform image2D GlossyMV;

#include <Misc/Camera.glsl>
#include <Misc/Utils.glsl>
#include <Misc/Constants.glsl>
#include <Materials/Microfacet.glsl>
#include "StochasticSSRCommon.glsl"

float calculateFadeAmount(vec2 positionUV, vec2 positionUV2, vec2 startPositionUV, vec3 reflectVS, vec3 viewVS){
    float fadeOnMirror = dot(reflectVS, viewVS);

    float boundary1 = distance(positionUV, vec2(0.5f, 0.5f)) * 2.0f;
    float boundary2 = distance(positionUV2, vec2(0.5f, 0.5f)) * 2.0f;
    float fadeOnEdge = max(1.0f - clamp((boundary1 - FADE_START) / (FADE_END - FADE_START), 0.0f, 1.0f), 1.0f - clamp((boundary2 - FADE_START) / (FADE_END - FADE_START), 0.0f, 1.0f));
    // float fadeOnEdge = 1.0f - clamp((boundary1 - FADE_START) / (FADE_END - FADE_START), 0.0f, 1.0f);

    float travelled = distance(positionUV, startPositionUV);
    float fadeOnDistance = 1.0f - clamp((travelled - FADE_START) / (FADE_END - FADE_START), 0.0f, 1.0f);

    return fadeOnMirror * fadeOnEdge * fadeOnDistance;
}

vec3 calculateGlossyPositionInAnotherEye(vec3 hitWS, vec3 originWS, vec3 normalWS, int viewIndex)
{
    vec3 reflectRayWS = hitWS - originWS;
    vec3 virtualImageWS = hitWS - 2.0f * dot(reflectRayWS, normalWS) * normalWS; 

    vec4 virtualImageHSEye2 =  camera.stereoProjection[1 - viewIndex] * camera.stereoView[1 - viewIndex] * vec4(virtualImageWS, 1.0f);

    vec3 virtualImageSSEye2 = virtualImageHSEye2.xyz / virtualImageHSEye2.w;
    virtualImageSSEye2.xy = virtualImageSSEye2.xy * 0.5f + 0.5f;
    virtualImageSSEye2.y = 1.0f - virtualImageSSEye2.y; // flip y

    return virtualImageSSEye2;
}

bool hiZTracing(vec3 pointSS0, vec3 pointSS1, vec3 pointSS0Eye2, vec3 pointSS1Eye2, inout int viewIndex, inout vec3 hitPointSS, inout vec3 hitPointSSEye2)
{
    pointSS0.z = Linear01Depth(pointSS0.z);
    pointSS1.z = Linear01Depth(pointSS1.z);

    vec3 rayDir = pointSS1 - pointSS0;
    vec2 rayDirEye2XY = pointSS1Eye2.xy - pointSS0Eye2.xy;

    vec2 stepSign;
    stepSign.x = (rayDir.x >= 0) ? 1.0f : -1.0f;
    stepSign.y = (rayDir.y >= 0) ? 1.0f : -1.0f;
    vec2 stepOffset = HIZ_STEP_EPSILON * stepSign.xy;

    vec2 stepSignEye2;
    stepSignEye2.x = (rayDirEye2XY.x >= 0) ? 1.0f : -1.0f;
    stepSignEye2.y = (rayDirEye2XY.y >= 0) ? 1.0f : -1.0f;
    vec2 stepOffsetEye2 = HIZ_STEP_EPSILON * stepSignEye2.xy;

    vec2 step = clamp(stepSign.xy, 0.0f, 1.0f); // if rayDir is negative, offset will make it to else pixel
    vec2 stepEye2 = clamp(stepSignEye2.xy, 0.0f, 1.0f);

    float pointSS0InvZ = 1.0f / pointSS0.z;
    float pointSS1InvZ = 1.0f / pointSS1.z;

    float interpPoint = pointSS0InvZ;
    float interpVec = pointSS1InvZ - pointSS0InvZ;

    // claculate tParameter (1/z - 1/z0) / (1/z1 - 1/z0)
    float calcT0 = -pointSS0InvZ;
    float calcT1 = 1.0f / (pointSS1InvZ - pointSS0InvZ);

    vec2 levelSize = GetHiZLevelSize(0.0f);
    vec2 pixel = GetHizPixel(pointSS0.xy, levelSize); // pixel must in stereo texture [960, 1080]

    vec2 tStartPixelXY = ((pixel + step) / levelSize + stepOffset - pointSS0.xy) / rayDir.xy;
    float tParameter = min(tStartPixelXY.x, tStartPixelXY.y);
    vec2 tSceneZMinMax = vec2(0.0f, 1.0f);
    float mipLevel = ssrData.hiZStartLevel; // set to 2
    int rawViewIndex = viewIndex;

    minMaxHiZTraversalLoop(step, stepOffset, stepEye2, stepOffsetEye2, pointSS0, rayDir, pointSS0Eye2.xy, rayDirEye2XY, calcT0, calcT1, viewIndex, mipLevel, tParameter, tSceneZMinMax);

    hitPointSS = (rawViewIndex == viewIndex) ? vec3(pointSS0.xy + rayDir.xy * tParameter, 1.0f / (interpPoint + interpVec * tParameter)) : vec3(pointSS0Eye2.xy + rayDirEye2XY * tParameter, 1.0f / (interpPoint + interpVec * tParameter));
    hitPointSSEye2 = (rawViewIndex == viewIndex) ? vec3(pointSS0Eye2.xy + rayDirEye2XY * tParameter, 1.0f / (interpPoint + interpVec * tParameter)) : vec3(pointSS0.xy + rayDir.xy * tParameter, 1.0f / (interpPoint + interpVec * tParameter));

    return (mipLevel != -1.0f) || (tParameter < tSceneZMinMax.x) || (tParameter > tSceneZMinMax.y);
}

void main() 
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    int viewIndex = pixel.x < (camera.pixelSize.x / 2) ? 0 : 1;
    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;

    vec3 pointSS0 = vec3(ScreenUVToStereoUV(screenUV, viewIndex), texture(inDepth, screenUV).x);

    vec3 normalWS = texture(inNormal, screenUV).xyz;
    vec3 normalVS = normalize(mat3(transpose(inverse(camera.stereoView[viewIndex]))) * normalWS);
    vec3 originVS = StereoViewSpacePosAtScreenUV(screenUV);
    vec4 originWS = camera.invStereoView[viewIndex] * vec4(originVS, 1.0f);

    vec3 viewRayVS = normalize(originVS);
    vec3 viewRayWS = normalize(mat3(transpose(inverse(camera.invStereoView[viewIndex]))) * viewRayVS);
    float roughness = texture(inMaterial, screenUV).g;

    vec2 Xi = texture(blueNoise, (screenUV + jitterData.jitter) * ssrData.noiseScale ).xy; 
    Xi.x = mix(Xi.x, 0.0f, ssrData.brdfBias);
    // Xi.y = mix(Xi.y, 0.0f, ssrData.brdfBias); // if costheta is calculated by sqrt(1 - Xi.y), then Xi.y should be biased

    float pdf = 1.0f;
    vec3 H = localToWorld(sampleGGX_NDF(roughness*roughness, Xi, pdf), normalWS);

    // vec3 H = vec3(0.0f);
    // if(roughness > 0.1f) {
    //     H = ImportanceSampleGGX(Xi, normalWS, roughness);
    // } else {
    //     H = normalWS;
    // }
    vec3 reflectDirWS = normalize(reflect(viewRayWS, H));
    vec3 reflectDirVS = normalize(mat3(transpose(inverse(camera.stereoView[viewIndex]))) * reflectDirWS);

    float NdotH = clamp(dot(normalWS, H), 0.0f, 1.0f);
    float LdotH = clamp(dot(reflectDirWS, H), 0.0f, 1.0f);
    float VdotH = clamp(dot(-viewRayWS, H), 0.0f, 1.0f);

    // float pdf = roughness > 0.1f ? evalGGX(roughness * roughness, NdotH) * NdotH : 1.0f;
    pdf = pdf / (4.0f * VdotH);

    float maxRayLength = min((camera.projectionParams.z * camera.projectionParams.x - originVS.z) / reflectDirVS.z, ssrData.maxRayLength);
    vec3 endPointVS = originVS + reflectDirVS * maxRayLength;

    vec4 pointHS1 = camera.stereoProjection[viewIndex] * vec4(endPointVS, 1.0f);
    vec3 pointSS1 = pointHS1.xyz / pointHS1.w; // depth is hyperbolic depth
    pointSS1.xy = pointSS1.xy * 0.5f + 0.5f;
    pointSS1.y = 1.0f - pointSS1.y; // flip y

    vec4 pointHS0Eye2 = camera.stereoProjection[1 - viewIndex] * camera.stereoView[1 - viewIndex] * originWS;
    vec4 pointHS1Eye2 = camera.stereoProjection[1 - viewIndex] * camera.stereoView[1 - viewIndex] * camera.invStereoView[viewIndex] * vec4(endPointVS, 1.0f);
    vec3 pointSS0Eye2 = pointHS0Eye2.xyz / pointHS0Eye2.w;
    vec3 pointSS1Eye2 = pointHS1Eye2.xyz / pointHS1Eye2.w;
    pointSS0Eye2.xy = pointSS0Eye2.xy * 0.5f + 0.5f;
    pointSS0Eye2.y = 1.0f - pointSS0Eye2.y; // flip y
    pointSS1Eye2.xy = pointSS1Eye2.xy * 0.5f + 0.5f;
    pointSS1Eye2.y = 1.0f - pointSS1Eye2.y; // flip y

    vec3 hitPointSS = vec3(-1.0f);
    vec3 hitPointSSEye2 = vec3(-1.0f);
    int hitViewIndex = viewIndex;
    bool missed = true;

    if(reflectDirVS.z < 0.0f) {
        missed = hiZTracing(pointSS0, pointSS1, pointSS0Eye2, pointSS1Eye2, hitViewIndex, hitPointSS, hitPointSSEye2);
    }

    float alphaBlend = 0.0f;
    vec2 glossyMV = vec2(-1.0f);
    if(missed) {
        hitPointSS.xy = vec2(-1.0f);
    }
    else {
        vec4 hitWS = camera.invStereoView[hitViewIndex] * vec4(StereoViewSpacePosAtStereoUV(hitPointSS.xy, hitViewIndex), 1.0f);

        vec3 glossySS = calculateGlossyPositionInAnotherEye(hitWS.xyz, originWS.xyz, normalWS, viewIndex);
        glossySS.xy = StereoUVToScreenUV(glossySS.xy, 1 - viewIndex);

        int rawInstanceID = int(texture(inInstanceID, screenUV).x);
        int glossyInstanceID = int(texture(inInstanceID, glossySS.xy).x);

        glossyMV = rawInstanceID == glossyInstanceID ? glossySS.xy - screenUV : vec2(0.0f);
        // glossyMV = glossySS.xy - screenUV;
        alphaBlend = calculateFadeAmount(hitPointSS.xy, hitPointSSEye2.xy, pointSS0.xy, reflectDirVS, viewRayVS);
        hitPointSS.xy = StereoUVToScreenUV(hitPointSS.xy, hitViewIndex);
    }

    imageStore(SSRHitsMap, pixel, vec4(hitPointSS, pdf));
    imageStore(SSRMask, pixel, vec4(alphaBlend));
    imageStore(GlossyMV, pixel, vec4(glossyMV, 0.0f, 0.0f));
}