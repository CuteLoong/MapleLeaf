#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_shader_atomic_float : enable

#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 32, local_size_y = 16, local_size_z = 1) in;

layout(push_constant) uniform PushObject {
	float alpha;
} object;

layout(set=0, binding=1) uniform sampler2D depth;
layout(set=0, binding=2) uniform sampler2D prevDepth;
layout(set=0, binding=3) uniform sampler2D motionVector;
layout(set=0, binding=4) uniform sampler2D prevMotionVector;

layout(set=0, binding=5, r32i) uniform iimage2D Zero2OneDepth_Int;
layout(set=0, binding=6, r32i) uniform iimage2D One2ZeroDepth_Int;
// layout(set=0, binding=7) writeonly uniform image2D BlockInit;

#include <Misc/Camera.glsl>

// #define alpha 0.6

vec2 ScreenUVToStereoUV(vec2 uv, int viewIndex)
{
    int pixelOffset = int(camera.stereoPixelSize.x * viewIndex);
    float rawX = uv.x * camera.pixelSize.x;
    float jitterX = rawX - int(rawX);

    int pixelX = int(rawX) - pixelOffset;
    vec2 stereoUV = vec2((pixelX + jitterX) * camera.stereoPixelSize.z, uv.y);
    return stereoUV;
}

vec2 StereoUVToScreenUV(vec2 stereoUV, int viewIndex)
{
    stereoUV.x = clamp(stereoUV.x, 0.0f, 1.0f);
    int pixelOffset = int(camera.stereoPixelSize.x * viewIndex);
    float rawX = stereoUV.x * camera.stereoPixelSize.x;
    float jitterX = int(rawX) == 0 ? 0.5f : rawX - int(rawX);

    int pixelX = int(rawX) + pixelOffset;
    vec2 uv = vec2((pixelX + jitterX) * camera.pixelSize.z, stereoUV.y);
    return uv;
}

void main()
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if(pixel.x >= camera.pixelSize.x || pixel.y >= camera.pixelSize.y)
        return;

    int viewIndex = pixel.x < (camera.pixelSize.x / 2) ? 0 : 1;
    vec2 screenUV = (vec2(pixel) + vec2(0.5f)) * camera.pixelSize.zw;
    vec2 stereoUV = ScreenUVToStereoUV(screenUV, viewIndex);

    vec2 mv = texelFetch(motionVector, pixel, 0).xy * (1.0 - object.alpha);
    vec2 prevMV = texelFetch(prevMotionVector, pixel, 0).xy * object.alpha;

    float current_depth = texelFetch(depth, pixel, 0).r;
    float prev_depth = texelFetch(prevDepth, pixel, 0).r;

    vec2 zero2alphaStereoUV = stereoUV + prevMV;
    vec2 one2alphaStereoUV = stereoUV - mv;

    bool valid_zero2alpha = zero2alphaStereoUV.x >= 0.0f && zero2alphaStereoUV.x <= 1.0f && zero2alphaStereoUV.y >= 0.0f && zero2alphaStereoUV.y <= 1.0f;
    bool valid_one2alpha = one2alphaStereoUV.x >= 0.0f && one2alphaStereoUV.x <= 1.0f && one2alphaStereoUV.y >= 0.0f && one2alphaStereoUV.y <= 1.0f;

    // if(zero2alphaStereoUV.x < 0.0f || zero2alphaStereoUV.x > 1.0f || alpha2oneStereoUV.x < 0.0f || alpha2oneStereoUV.x > 1.0f || alpha2oneStereoUV.y < 0.0f || alpha2oneStereoUV.y > 1.0f || zero2alphaStereoUV.y < 0.0f || zero2alphaStereoUV.y > 1.0f)
    //     return;

    vec2 zero2alphaUV = StereoUVToScreenUV(stereoUV + prevMV, viewIndex);
    vec2 one2alphaUV = StereoUVToScreenUV(stereoUV - mv, viewIndex);

    vec2 zero2alphaPixel = zero2alphaUV * camera.pixelSize.xy;
    vec2 one2alphaPixel = one2alphaUV * camera.pixelSize.xy;

    int current_depth_int = floatBitsToInt(current_depth);
    int prev_depth_int = floatBitsToInt(prev_depth);

    if(valid_zero2alpha) imageAtomicMin(Zero2OneDepth_Int, ivec2(zero2alphaPixel), prev_depth_int);
    if(valid_one2alpha) imageAtomicMin(One2ZeroDepth_Int, ivec2(one2alphaPixel), current_depth_int);

    // if(stereoUV.x < 0.5 && stereoUV.y < 0.5) {
    //     imageStore(BlockInit, pixel, vec4(1.0f, 0.0f, 0.0f, 1.0f));
    // }
    // else if(stereoUV.x >= 0.5 && stereoUV.y < 0.5) {
    //     imageStore(BlockInit, pixel, vec4(0.0f, 1.0f, 0.0f, 1.0f));
    // }
    // else if(stereoUV.x < 0.5 && stereoUV.y >= 0.5) {
    //     imageStore(BlockInit, pixel, vec4(0.0f, 0.0f, 1.0f, 1.0f));
    // }
    // else if(stereoUV.x >= 0.5 && stereoUV.y >= 0.5) {
    //     imageStore(BlockInit, pixel, vec4(1.0f, 1.0f, 0.0f, 1.0f));
    // }
}
